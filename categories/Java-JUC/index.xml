<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java | JUC on acronymor&#39;s blog</title>
    <link>https://acronymor.com/categories/Java-JUC/</link>
    <description>Recent content in Java | JUC on acronymor&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Apr 2020 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://acronymor.com/categories/Java-JUC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ch18-Java Atomic 之 Atomic*</title>
      <link>https://acronymor.com/posts/java-juc/ch18/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch18/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt;，Atmoic 的整个家族实现方式大同小异，简单来说，借助 volatile 保证可见性和有序性，借助 CAS 保证 原子性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch17-Java Executors 之 ThreadPoolExecutor</title>
      <link>https://acronymor.com/posts/java-juc/ch17/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch17/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.util.concurrent.ThreadPoolExecutor&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch16-Java tools 之 CyclicBarrier</title>
      <link>https://acronymor.com/posts/java-juc/ch16/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch16/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.util.concurrent.CyclicBarrier&lt;/code&gt; 底层基于 ReentrantLock 和 Condition 实现，如果 count 不为 0，则调用 Condition 的 await 方法让线程等待执行，当 count 为 0 时，调用 Condition 的 singleAll 唤醒全部等待的线程执行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch15-Java tools 之 Semaphore</title>
      <link>https://acronymor.com/posts/java-juc/ch15/</link>
      <pubDate>Tue, 24 Mar 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch15/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.util.concurrent.Semaphore&lt;/code&gt; 类表示信号量。Semaphore 内部主要通过 AQS（AbstractQueuedSynchronizer）实现线程的管理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch14-Java tools 之 CountDownLatch</title>
      <link>https://acronymor.com/posts/java-juc/ch14/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch14/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.util.concurrent.CountDownLatch&lt;/code&gt; 是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程执行完后再执行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch13-Java Collections 之 CopyOnWriteArrayList</title>
      <link>https://acronymor.com/posts/java-juc/ch13/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch13/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.util.concurrent.CopyOnWriteArrayList&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch12-Java Collections 之 DelayQueue</title>
      <link>https://acronymor.com/posts/java-juc/ch12/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch12/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.util.concurrent.DelayQueue&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch11-Java Collections 之 PriorityBlockingQueue</title>
      <link>https://acronymor.com/posts/java-juc/ch11/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch11/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.util.concurrent.PriorityBlockingQueue&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch10-Java Collections 之 LinkedBlockingQueue</title>
      <link>https://acronymor.com/posts/java-juc/ch10/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch10/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.util.concurrent.LinkedBlockingQueue&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch9-Java Collections 之 ArrayBlockingQueue</title>
      <link>https://acronymor.com/posts/java-juc/ch09/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch09/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.util.concurrent.ArrayBlockingQueue&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch8-Java Lock 之 ReentrantReadWriteLock</title>
      <link>https://acronymor.com/posts/java-juc/ch08/</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch08/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.util.concurrent.locks.ReentrantReadWriteLock&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch7-Java Lock 之 ReentrantLock</title>
      <link>https://acronymor.com/posts/java-juc/ch07/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch07/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.util.concurrent.locks.ReentrantLock&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch6-Java Lock 之 LockSupport</title>
      <link>https://acronymor.com/posts/java-juc/ch06/</link>
      <pubDate>Thu, 09 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch06/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.util.concurrent.locks.LockSupport&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch5-Java Lock 之 AQS</title>
      <link>https://acronymor.com/posts/java-juc/ch05/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch05/</guid>
      <description>&lt;p&gt;AQS 即 &lt;code&gt;java.util.concurrent.locks.AbstractQueuedSynchronizer&lt;/code&gt;，可以用来构建锁和同步器的框架，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch4-Java 之 JUC</title>
      <link>https://acronymor.com/posts/java-juc/ch04/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch04/</guid>
      <description>&lt;p&gt;JUC 即 &lt;code&gt;java.util.concurrent&lt;/code&gt;，是 Java 并发编程中很常用的实用工具类。它包含了 &lt;code&gt;Lock 框架&lt;/code&gt;，&lt;code&gt;Collections 并发集合&lt;/code&gt;，&lt;code&gt;Executors 线程池&lt;/code&gt;，&lt;code&gt;Atomic 原子类&lt;/code&gt;，&lt;code&gt;Tools&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch3-Java 之 ThreadLocal</title>
      <link>https://acronymor.com/posts/java-juc/ch03/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch03/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.lang.ThreadLocal&lt;/code&gt;是一个将在多线程中为每一个线程创建单独的变量副本的类; 当使用 ThreadLocal 来维护变量时，ThreadLocal 会为每个线程创建单独的变量副本，避免因多线程操作共享变量而导致的数据不一致的情况。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ch02-Java JUC 之 线程基础</title>
      <link>https://acronymor.com/posts/java-juc/ch02/</link>
      <pubDate>Thu, 06 Apr 2017 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch02/</guid>
      <description> 1. 线程状态 # state 状态 说明 New 新建 新创建了一个线程对象，还未调用线程的 start() 方法 Runnable 就绪 线程对象创建后，其他线程调用了该对象的 start() 方法，该状态的线程位于可运行线程池中，变得可运行，等待获取 CPU 的使用权 Running 运行 就绪状态的线程获取了 CPU，执行程序代码的状态，还有种可能就是这个线程正在等待其他的系统资源（IO 资源等），这种状态也称为 Running 状态 Blocked 阻塞 一个线程因为等待监视锁而被阻塞的状态，也称之为阻塞状态。阻塞的线程不会被分配 CPU 资源 WAITING 等待 一个正在等待的线程的状态，也称之为等待状态 TIMED_WAITING 超时等待 一个在限定时间内等待的线程的状态。也称之为限时等待状态 Dead 死亡 线程执行完了或者因异常退出了 run() 方法，该线程结束生命周期 (当时如果线程被持久持有，可能不会被回收) 注意：&#xA;WAITING: 造成线程等待的原因有三种，分别是调用 Object.wait()、join() 以及 LockSupport.park() 方法。处于等待状态的线程，正在等待其他线程去执行一个特定的操作。例如：因为 wait() 而等待的线程正在等待另一个线程去调用 notify() 或 notifyAll()；一个因为 join() 而等待的线程正在等待另一个线程结束。处于等待状态的线程不会被分配 CPU 资源。 TIMED_WAITING: 造成线程限时等待状态的原因有五种，分别是调用 Thread.sleep(long)、Object.wait(long)、join(long)、LockSupport.parkNanos(obj,long) 和 LockSupport.parkUntil(obj,long)。 2. 线程状态转换 # </description>
    </item>
    <item>
      <title>Ch01-Java JUC 之 理论基础</title>
      <link>https://acronymor.com/posts/java-juc/ch01/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0800</pubDate>
      <guid>https://acronymor.com/posts/java-juc/ch01/</guid>
      <description> Happens-Before 规则 # 规则 说明 单一线程原则 在一个线程内，在程序前面的操作先行发生于后面的操作 管程锁定规则 一个 unlock 操作先行发生于后面对同一个锁的 lock 操作 volatile 变量规则 对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作 线程启动规则 Thread 对象的 start() 方法调用先行发生于此线程的每一个动作 线程加入规则 Thread 对象的结束先行发生于 join() 方法返回 线程中断规则 对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生 对象终结规则 一个对象的初始化完成 (构造函数执行结束) 先行发生于它的 finalize() 方法的开始 传递性 如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C 参考文献 # Java 并发 - 理论基础 </description>
    </item>
  </channel>
</rss>
